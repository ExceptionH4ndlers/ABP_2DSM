name: CI

on:
  push:
    branches: ["main", "refactor"]
  pull_request:
    branches: ["main", "refactor"]

jobs:
  server-ci:
    name: Server CI
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Setup Node.js (cache compartilhado com front)
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"
          cache-dependency-path: |
            ./server/package-lock.json
            ./front/package-lock.json

      # 3. Instalar dependências
      - name: Install dependencies
        run: npm install
        working-directory: ./server

      # 4. Checar formatação (Prettier)
      - name: Run Prettier check
        run: npm run format:check
        working-directory: ./server

      # 5. Lint (ESLint)
      - name: Run ESLint
        run: npm run lint
        working-directory: ./server

      # 6. Build (TypeScript)
      - name: Run TypeScript build
        run: npm run build
        working-directory: ./server

  front-ci:
    name: Frontend CI
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Setup Node.js (cache compartilhado com server)
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"
          cache-dependency-path: |
            ./server/package-lock.json
            ./front/package-lock.json

      # 3. Instalar dependências
      - name: Install dependencies
        run: npm install
        working-directory: ./front

      # 4. Checar formatação (Prettier)
      - name: Run Prettier check
        run: npm run format:check
        working-directory: ./front

      # 5. Lint (ESLint)
      - name: Run ESLint
        run: npm run lint
        working-directory: ./front

      # 6. Build (Vite + TypeScript)
      - name: Run Build
        run: npm run build
        working-directory: ./front

  docker-ci:
    name: Docker Compose CI
    runs-on: ubuntu-latest
    needs: [server-ci, front-ci] # só roda se os dois jobs passarem

    steps:
      # 1. Checkout
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Setup Docker Buildx (necessário para build no CI)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 3. Build containers com docker-compose.dev.yml
      - name: Build Docker Compose stack
        run: docker compose -f docker-compose.dev.yml build

      # 4. Subir stack
      - name: Start services
        run: docker compose -f docker-compose.dev.yml up -d

      # 5. Verificar containers rodando
      - name: Check running containers
        run: docker ps -a

      # 6. Derrubar stack no fim
      - name: Shutdown services
        if: always()
        run: docker compose -f docker-compose.dev.yml down -v

  database-ci:
    name: Database CI
    runs-on: ubuntu-latest
    needs: [docker-ci]

    services:
      postgres-furnas:
        image: postgres:17
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: furnas_campanha
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432

      postgres-sima:
        image: postgres:17
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: sima
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5434:5432

      postgres-balcar:
        image: postgres:17
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: balcar_campanha
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5435:5432

    steps:
      # 1. Checkout
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      # 3. Instalar dependências do servidor
      - name: Install server dependencies
        run: npm install
        working-directory: ./server

      # 4. Executar scripts de criação das tabelas
      - name: Create Furnas tables
        run: |
          PGPASSWORD=postgres psql -h localhost -p 5433 -U postgres -d furnas_campanha -f furnas-campanha/create-table.sql
        env:
          PGPASSWORD: postgres

      - name: Create SIMA tables
        run: |
          PGPASSWORD=postgres psql -h localhost -p 5434 -U postgres -d sima -f sima/create-table.sql
        env:
          PGPASSWORD: postgres

      - name: Create Balcar tables
        run: |
          PGPASSWORD=postgres psql -h localhost -p 5435 -U postgres -d balcar_campanha -f balcar-campanha/create-table.sql
        env:
          PGPASSWORD: postgres

      # 5. Testar conexões com os bancos
      - name: Test database connections
        run: |
          echo "Testing Furnas database connection..."
          PGPASSWORD=postgres psql -h localhost -p 5433 -U postgres -d furnas_campanha -c "SELECT 1;"
          
          echo "Testing SIMA database connection..."
          PGPASSWORD=postgres psql -h localhost -p 5434 -U postgres -d sima -c "SELECT 1;"
          
          echo "Testing Balcar database connection..."
          PGPASSWORD=postgres psql -h localhost -p 5435 -U postgres -d balcar_campanha -c "SELECT 1;"
        env:
          PGPASSWORD: postgres

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [database-ci]

    steps:
      # 1. Checkout
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      # 3. Instalar dependências
      - name: Install dependencies
        run: npm install
        working-directory: ./server

      # 4. Build do servidor
      - name: Build server
        run: npm run build
        working-directory: ./server

      # 5. Testar se o servidor inicia corretamente
      - name: Test server startup
        run: |
          timeout 10s npm run dev || true
        working-directory: ./server
        env:
          NODE_ENV: test
